UML Diagrams:
Structural:
-Deployement diagram
-Component Diagram
-class Diagram
-Object Diagram

Behavoiural:
-Sequence Diagram
-UseCase Diagram
-Statechart

Rhapsody:
UML Diagrams,packages and code gen config


.vba file contains Macros


-Properties of rhapsody project
-Naming conventions

File diagram:

FIle interaction with each other/include structure  created/graphical representaiton of the file structure
-files
-Functions
-variables
-arguemens
-dependencieds


class Diagram:
Class diagram consists of classes, interfaces, associations(relations), and collaboration. Class diagrams basically 
represent the object-oriented view of a system, which is static in nature.


Use case diagram:
Has  actors,usecase and their associations(relations like aggreagation,etc)

associations:

1..*_____________________0..*
Association is a relationship between classifiers which is used to show that instances of classifiers 
could be either linked to each other or combined logically or physically into some aggregation.

aggreagation:
<>-----------
it is binary association,
if some or all of the composites are deleted, shared part may still exist.
one or more composite objects which group together a set of instances. It is a "weak" form of 
aggregation when part instance is independent of the composit

composition:
<|>-----------
strong" form of aggregation:
it is a whole/part relationship

generalisation:
<||----------
dependency:Directed relationship-supplier client
realization:
<|-----
Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the 
other represents an implementation of the latter (the client).


Statecharts:
*It defines state-based behaviour
*IS_IN qery function provides and  returns a true value if the state is in the current active configuration.
*InitStateChart() is called in constructor of class and  the state machine is initilised.


Connectors:
1.Transition Connector-
response to the message in a state(idle,initial or any)
A transition can have a trigger, guard, and actions.

2.Conditional Connector-
Condition connectors split a single segment into several branches on the basis of the guard condition.

3.History Connector-
History connectors store the most recent active configuration of a state and its substates. 
Only one history connector is allowed in a state.
When a transition is attached to a history connector and that transition is triggered, the state containing 
the history connector recalls its last active configuration

4.junction connector-
A junction connector combines several segments into one outgoing segment, as shown in the following figure.
The segments end up sharing the same transition line.

5.Diagram Connector-
it joins several segments in the same statechart.Diagram connectors enable you to jump to different parts of a diagram without
 drawing spaghetti transitions. This functionality helps avoid cluttering the statechart. The jump is defined by matching 
 names on the source and target diagram connectors.

6.Termination Connector-
The termination connector is the suicide or self-destruct connector.
If a transition to a termination connector is taken, the instance deletes itself. A termination connector cannot have an outgoing transition.

7.EnterExit points-
EnterExit points are used to represent the entry to / exit from sub-statecharts.



Statechart stuff:

Submachines-
Submachines manage the complexity of large statecharts by decomposition.
The original statechart is called the parent, whereas the decomposed part is called the submachine.

References:
https://www.uml-diagrams.org
https://www.ibm.com/support/knowledgecenter/SSB2MU_8.1.5/com.ibm.rhp.uml.diagrams.doc/topics/rhp_c_dm_connectors_stchrts.html
