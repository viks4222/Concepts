Class:
 A user defined data type which holds data members and member functions  ,, which can be accessed and
 used by creating instance of class called objet 

Constructors in C++

A constructor is a member function of a class which initializes objects of a class. 
In C++,Constructor is automatically called when object(instance of class) created .It is special member function of the class.
Constructors don’t have return type
If we do not specify a constructor, C++ compiler generates a default constructor for us (expects no parameters and has an empty body).

Default Constructors: Default constructor is the constructor which doesn’t take any argument. It has no parameters.

Parameterized Constructors: It is possible to pass arguments to constructors. Typically, these arguments help 
initialize an object when it is created. To create a parameterized constructor,

Constructor as private:
constructor can be declared by private in below cases:
1.Using friend class:  If we want that class should not be instantiated by anyone else but only by a friend class.
2.Using singleton design pattern.

can destructor be private?
Destructor can be private ,when we want to control the object destruction :
1.object destruction using a friend class.
if the destructor is private, then the object can only be 
deleted from inside the class as well. 


Copy Constructor:
A copy constructor is a member function which initializes an object using another object of the same class. 
eg. MyClass (const MyClass &old_obj); 

When is copy constructor called?
-When an object of the class is passed (to a function) by value as an argument.
eg.
-When an object of the class is returned by value.
-When an object is constructed based on another object of the same class.

write code ?
passed as ref to avoid non terminating chain of calls
const to avoid any accidental modificstion.

When to write user defined copy constructor?
We need to define our own copy constructor only if an object has pointers else the pointers of the both objects would point to
same memory location and could  cause undefined behavior.

shallow copying:
Default copy constructor and =operator function which is inserted by compiler in case they are missing from the class. 
It performs a bit pattern copy i.e. simply copies data members of one object into another object.

Deep copying:
the data members copied will have a new memory address.
Deep copy (pointers must not be copied. instead seperate memory allocation for them) must be introduced. 
So above code can be updated by introducing copy constructor and = operator function.	
	
* Copy Constructor is called when you want to initialize an object from the state of another object of same type - Thus object under
 "Copy Construction" is not already initialized.
* Default Copy constructor performs member-wise copy, so if the member variable has his own copy constructor then it is called. 
* During Copy Assignment, object already has a initialized state, so in implementation you should first destroy the current state 
 and then copy the state of the object on RHS. More advanced topic would be exception safety.
* In your implementation I see a potential memory leak as int buffer allocated to "x" is not freed before reallocating.
* Copy Assignments operators return type should be a reference so that cascading is possible. For example,
x = y = z
So declaration of your copy assignment operator should be CSample& operator = (const CSample& )
* To decide when one should provide any of a Copy Constructor, a Copy Assignment Operator and a destructor take help of rule of 3 ( Now after C++11 rule of 5) 
* GetX return type should be "int*"


Assignment Operator:
Invoked when already initialized object is assigned to existing object.
memory leak?

	
this pointer:
‘this’ pointer is a constant pointer that holds the memory address of the current object. 
The ‘this’ pointer is passed as a hidden argument to all nonstatic member function calls 

this can be deleted but in certain cases(ideally shoudnt be deleted).
It's safe to delete "this" as long as it's essentially the last operation in the method. In fact several professional level APIs do so (see ATL's CComObject implementation for an example).

The only danger is attempting to access any other member data after calling "delete this". This is certainly unsafe.


1)OOP concepts-encapsulation,data abstraction,inheritance,polymorphism 

Encapsulation:
Encapsulation is a process of wrapping of  data members and functions 
in a single unit called class. This is to prevent the access to the data directly, the access to them is 
provided through the functions of the class.
eg.
1) Make all the data members private.
2) Create public setter and getter functions for each data member in such a way that the set function 
	set the value of data member and get function get the value of data member.

Data Abstraction:
Data abstraction is one of the most essential and important feature of object oriented programming in C++. Abstraction 
means displaying only essential information and hiding the details. Data abstraction
 refers to providing only essential information about the data to the outside world, hiding the background details or implementation.
eg.
Abstraction using access specifiers(public,private,protected)

Implementation Difference Between Encapsulation and Abstraction

1.  Abstraction is implemented using interface and abstract class while Encapsulation is implemented using private and 
protected access modifier.

2. OOPS makes use of encapsulation to enforce the integrity of a type (i.e. to make sure data is used in an 
appropriate manner) by preventing programmers from accessing data 
in a non-intended manner. Through encapsulation, only a predetermined group of functions can access the data.
 The collective term for datatypes and operations (methods) bundled together with access restrictions (public/private, etc.) 
 is a class.

 Inheritance:
The capability of a class to derive properties and characteristics from another class is called Inheritance. 
Inheritance is one of the most important feature of Object Oriented Programming.
Sub Class: The class that inherits properties from another class is called Sub class or Derived Class.
Super Class:The class whose properties are inherited by sub class is called Base Class or Super class.

Modes of Inheritance

Public mode: If we derive a sub class from a public base class. Then the public member of the base class
 will become public in the derived class and protected members
 of the base class will become protected in derived class. 
 Private members of the base class will never get inherited in sub class.

 Protected mode: If we derive a sub class from a Protected base
 class. Then both public member and protected members of the base class will become protected in derived class.
 Private members of the base class will never get inherited in sub class.

 Private mode: If we derive a sub class from a Private base class. 
Then both public member and protected members of the base class 
will become Private in derived class. Private members of the base class will never get inherited in sub class 

Types of Inheritance in C++

 1.Single Inheritance: In single inheritance, a class is allowed to inherit from only one class.
 i.e. one sub class is inherited by one base class only.
 
 2.Multiple Inheritance: Multiple Inheritance is a feature of C++ where a class can inherit from more than one classes. 
 i.e one sub class is inherited from more than one base classes.

 3.Multilevel Inheritance: In this type of inheritance, a derived class is created from another derived class

 4.Hierarchical Inheritance: In this type of inheritance, more than one sub class is inherited from a single base class. 
 i.e. more than one derived class is created from a single base class.
 
 5.Hybrid (Virtual) Inheritance: Hybrid Inheritance is implemented by combining more than one type of inheritance. 
 For example: Combining Hierarchical inheritance and Multiple Inheritance.

Problem in Multiple inheritance:
The diamond problem:
The diamond problem occurs when two superclasses of a class have a common base class. For example, in the following diagram,
the TA class gets two copies of all attributes of Person class, this causes ambiguities 

To resolve the prob Virtual keyword is used in those two superclasses
 
polymorphism:
The word polymorphism means having many forms. In simple words, we can define polymorphism as the ability of a message
 to be displayed in more than one form.
In C++ polymorphism is mainly divided into two types:

1.Compile time Polymorphism
Compile time polymorphism: This type of polymorphism is achieved by function overloading or operator overloading.
Function Overloading: When there are multiple functions with same name but different parameters then these functions 
are said to be overloaded. Functions can be overloaded by change in number of arguments or/and change in type of arguments.
Operator Overloading: C++ also provide option to overload operators. For example, we can make the operator (‘+’) for string class 
to concatenate two strings. We know that this is the addition operator whose task is to add to operands.
 So a single operator ‘+’ when placed between integer operands , adds them and when placed between string
 operands, concatenates them.

2.Runtime Polymorphism:
Function overriding on the other hand occurs when a derived class has a definition for one of the member functions of the base class.
 That base function is said to be overridden.
 virtual functions are called according to the type of object pointed or referred
 
 
 Virtual Functions:
 
 What is the use?
Virtual functions allow us to create a list of base class pointers and call methods of any of the derived classes without even knowing 
kind of derived class object

vtable: A table of function pointers. It is maintained per class.
vptr: A pointer to vtable. It is maintained per object (See this for an example).

Compiler adds additional code at two places to maintain and use vptr.
1) Code in every constructor. This code sets vptr of the object being created. This code sets vptr to point to vtable of the class.
2) Code with polymorphic function call (e.g. bp->show() in above code). Wherever a polymorphic call is made, compiler inserts code to 
first look for vptr using base class pointer or reference (In the above example, since pointed or referred object is of derived type,
 vptr of derived class is accessed). Once vptr is fetched, vtable of derived class can be accessed. Using vtable, address of 
 derived derived class function show() is accessed and called.


 Object Slicing in C++
In C++, a derived class object can be assigned to a base class object, but the other way is not possible.
Object slicing happens when a derived class object is assigned to a base class object,
 additional attributes of a derived class object are sliced off to form the base class object.

 We can avoid above unexpected behavior with the use of pointers or references. Object slicing doesn’t occur when pointers 
 or references to objects are passed as function arguments since a pointer or reference of any type takes same amount 
 of memory. For example, if we change the global method myfunc() in the above program to following, object slicing doesn’t happen.

Virtual Functions:
A virtual function declared in a class shall be defined, or declared pure in that class, or both
So either you should make the function pure virtual or provide a definition for it.
Note that a destructor must be defined even if it is declared pure-virtual 
1.A class with atleast one method as pure virtual is called abstract class
2.If all the moethods in a class are pure virtual it is an interface class and it should have an 
implementor class where function definations are provided.
3.An abstract class can have constructors.
4.If we do not override the pure virtual function in derived class, then derived class also becomes abstract class
5 We can have pointers and references of abstract class type.




Static variable:
gets space allocated in static storage.
initiate only once and the value carried out to next level(function calls).
-not shared by the objects(Since stored in static storage).
variables can not be initialized using constructors.
initialization happens outside class
the static data is initialized to zero if no other initialization is present at the time of object creation
This is useful for implementing coroutines in C/C++ or any other
 application where previous state of function needs to be stored
 
 static function:-
 By declaring a function member as static, you make it independent of any particular object of the class.
 A static member function can be called even if no objects of the class exist and the static functions are accessed
 using only the class name and the scope resolution operator ::.

 static member functions do not have this pointer.
 A static member function cannot be virtual (See this G-Fact)
 Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration.
 static member function can not be declared const, volatile, or const volatile.



Static use in getInstance(singleton pattern)

To retain the value on multiple invokations and avoid further creation of the instance.
Thereby maintaining a single copy of object.

C++ const keyword:
A function becomes const when const keyword is used in function’s declaration. The idea of const functions is not allow them 
to modify the object on which they are called.
It is recommended practice to make as many functions const as possible so that
accidental changes to objects are avoided. 

Inline:
 When the inline function is called whole code of the inline function gets inserted or substituted at the point of inline function call. 
 This substitution is performed by the C++ compiler at compile time. Inline function may increase efficiency if it is small.
 Reduces execution time.
 used only when function switching  time is more than the function execution tmme.
 
 Friend class:
 Friend Class A friend class can access private and protected members of other class in which it is declared as friend. 
 It is sometimes useful to allow a particular class to access private members of other class. 
 For example a LinkedList class may be allowed to access private members of Node.

1) Friends should be used only for limited purpose. too many functions or external classes are declared as friends of 
a class with protected or private data, it lessens the value of encapsulation of separate classes in object-oriented programming.
2) Friendship is not mutual. If a class A is friend of B, then B doesn’t become friend of A automatically.
3) Friendship is not inherited.
4) The concept of friends is not there in Java.

friend function :-
The function is declared friend in class whose private members to be accessed.
Friend properties same as friend class.


 class Node
{
private:
  int key;
  Node *next;
 
  /* Other members of Node Class */
  friend int LinkedList::search(); // Only search() of linkedList 
                                  // can access internal members
};
 

Reference:
a constant pointer, once initialized cannot be changed.
alternative to existing variable.
passbyref- Use when you dont have to reseat the arguments.
use of references
cannot declare void.  and it cant be NULL.
less powerful
Once reference created cant be changed ie. constant ptr.
Must be initialized.
safer and easier to use.

pointer:
Stores address of another variable.
passbypointer- Use when you have to reseat the arguments.

use of pointer
can be void can be NULL.
more powerful
pointer can be changed 
not necessasary to be initialized.
safer and easier to use.
smart pointers:-wrapper class over pointer with operations like * and -> overloaded.
destructor is automatically called.
 Dangling pointer:
 A pointer pointing to a memory location that has been deleted (or freed) is called dangling pointer. 
 There are three different ways where Pointer acts as dangling pointer:
 1.De-allocation of memory
2.Function Call
3.Variable goes out of scope

Void pointer:
Void pointer is a specific pointer type – void * – a pointer that points to some data location in storage
 which doesn’t have any specific type. Void refers to the type. Basically the type of data that it points to is can be any. 
 If we assign address of char data type to void pointer it will become char Pointer, if int data type then int pointer and so on.
 Any pointer type is convertible to a void pointer hence it can point to any value.
Important Points
void pointers cannot be dereferenced. It can however be done using typecasting the void pointer
Pointer arithmetic is not possible on pointers of void due to lack of concrete value and thus size.

NULL Pointer:
NULL Pointer is a pointer which is pointing to nothing. In case, if we don’t have address to be assigned
 to a pointer, then we can simply use NULL.

Uninitialized pointer:
 An uninitialized pointer stores an undefined value. A null pointer stores a defined value, but one that
 is defined by the environment to not be a valid address for any member or object

Wild pointer:
A pointer which has not been initialized to anything (not even NULL) is known as wild pointer. The pointer
 may be initialized to a non-NULL garbage value that may not be a valid address.
 points to some arbirtary location and may cause a program to crash
int main()
{
    int *p;  /* wild pointer */
    int x = 10;
    // p is not a wild pointer now
    p = &x;
    return 0;
}


Singleton design pattern:
ownership is not reasonably assigned
global access is possible
single instance - private
aceess method  - public

singelton code:


difference betn free and delete:
free - Deallocating memory block erlier allocated by  malloc ,calloc, realloc
If ptr does not point to a block of memory allocated with the above functions, it causes undefined behavior.
If ptr is a null pointer, the function does nothing.
its a library function
doesn't invoke destructor

delete:
Deallocates the memory block pointed to by ptr (if not null), releasing the storage space previously
 allocated to it by a call to operator new[] and rendering that pointer location invalid.
 its an opearator.
 invokes destructor
 fastrer than free.
 
difference betn malloc and new:
 malloc:
 Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
its a library functions
doesn't invoke constructor
cannot overrride
size to be calculated by user.
memroyv allocated from heap.

new:
Allocates size bytes of storage, suitably aligned to represent any object of that size, and returns a non-null pointer
to the first byte of this block.
On failure, it throws a bad_alloc exception.
its an operator
does invoke constructor
can overrride
size calculated by compiler
memory allcocated from free store.
 
 
 Virtual Function:
(Runtime polymorphism)
A virtual function is a member function which is declared within base class and is re-defined (Overriden) by derived class.
When you refer to a derived class object using a pointer or a reference to the base class, you can call a virtual function 
for that object and execute the derived class’s version of the function.
Base *bp = new Derived;(base pointer pointed to derived)

	-It is not mandatory for derived class to override (or re-define the virtual function),
		in that case base class version of function is used.
	-A class may have virtual destructor but it cannot have a virtual constructor.
	-Virtual functions cannot be static and also cannot be a friend function of another class.
	
	
	vtable:
	
	TO implement virtual functions, c++ uses special form of late binding called vtable.
	The virtual table is a lookup table of functions used to resolve function calls in a dynamic/late binding.
	
	
why constructor can't be virtual ?
1.We cannot declare a virtual constructor. We should specify the exact type of the object at compile time.
2.A virtual call is a mechanism to get work done given partial information. In particular, 
"virtual" allows us to call a function knowing only an interfaces and not the exact type of the object. 
To create an object you need complete information. In particular, you need to know the exact type of what 
you want to create. Consequently, a "call to a constructor" cannot be virtual.

why destructor can be virtual ?
1.Virtual destructors are useful when you can delete an instance of a derived class through a pointer to base class.
to avoid leaks if we leave the object undeleted
