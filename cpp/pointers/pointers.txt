
pointer:
Stores address of another variable.
passbypointer- Use when you have to reseat the arguments.
use of pointer
can be void can be NULL.
more powerful
pointer can be changed 
not necessasary to be initialized.
safer and easier to use.
smart pointers:-wrapper class over pointer with operations like * and -> overloaded.
destructor is automatically called.
 Dangling pointer:
 A pointer pointing to a memory location that has been deleted (or freed) is called dangling pointer. 
 There are three different ways where Pointer acts as dangling pointer:
 1.De-allocation of memory
2.Function Call
3.Variable goes out of scope

Void pointer:
Void pointer is a specific pointer type – void * – a pointer that points to some data location in storage
 which doesn’t have any specific type. Void refers to the type. Basically the type of data that it points to is can be any. 
 If we assign address of char data type to void pointer it will become char Pointer, if int data type then int pointer and so on.
 Any pointer type is convertible to a void pointer hence it can point to any value.
Important Points
void pointers cannot be dereferenced. It can however be done using typecasting the void pointer
Pointer arithmetic is not possible on pointers of void due to lack of concrete value and thus size.

NULL Pointer:
NULL Pointer is a pointer which is pointing to nothing. In case, if we don’t have address to be assigned
 to a pointer, then we can simply use NULL.

Uninitialized pointer:
 An uninitialized pointer stores an undefined value. A null pointer stores a defined value, but one that
 is defined by the environment to not be a valid address for any member or object

Wild pointer:
A pointer which has not been initialized to anything (not even NULL) is known as wild pointer. The pointer
 may be initialized to a non-NULL garbage value that may not be a valid address.
 points to some arbirtary location and may cause a program to crash
int main()
{
    int *p;  /* wild pointer */
    int x = 10;
    // p is not a wild pointer now
    p = &x;
    return 0;
}

