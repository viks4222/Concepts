


display of multimedia content between Miracast® devices. Miracast allows users to wirelessly share multimedia, 
including high-resolution pictures and high-definition (HD) video content between Wi-Fi devices, 
even if a Wi-Fi network is not available.

Miracast:

Projects content from mobile devices to automobile infotainment systems
Shares a laptop screen with a conference room projector in real-time
Streams HD and 4K Ultra HD movies from a tablet to an HD television
Shows pictures from a smartphone, computer, or tablet to a large screen television
Support a wide range of audio/video formats to extend battery life in mobile devices
Miracast also supports premium content—such as Blu-ray feature films, live television shows and sports, 
and other copy-protected premium content—allowing you to watch what you want, where you want.

connects using network infrastructure or Wi-Fi Direct.






Intro:

Working in kpit technologies for past 2.5 years in infotainment projects.
Have worked for clients like F10 & Continental.
Currently working for F10 (now DTEN)client in  vehicle infotainment and conn project.
Have experience of working in application Modelling & UI design.
Have developed application using oops concepts in c++.
Team of 9 people working on a new module,has worked in application modelling  

project uses mix of design patterns like singleton and state observer pattern.


This is an in-vehicle infotainment & connectivity project which includes multimedia apps like phone, Wi-Fi & media.,FM,AM
It has projection technologies like Apple Carplay, Android-Auto and Baidu-Carlife, Vehicle applications like RVC(rear view camera),
climate control & Trailering App.
Baidu-Carlife feature is responsible for rendering the projection of the data streamed on phone device to the HUD(head up display) 
in vehicle.
Share telephone parameter updates such as signal strength to Mobile device, navigation, provide phone features, VR(voice Recognition).
applications communicate using dbus calls.Uses Altia design tool  for rendering the HMI on HUD.


Main executable container for HMI library framework, performs loading and unloading of framework
libraries and al applications like media,HFP,wifi,projection.

Performed the Roles:
rhapsody development:
newly added states,functions and interfaces to the baidu carlife module.

UI Development:
Altia Design Tool

Bug Fixing

SRS & Premodel creation
Test case writing
The Application and mw communicate over dbus to delegate the user and system calls



preparation :

1. resume update

Project Info:

Second project i worked in was Infotainment and connectivity solution for FTEN, which is the longest project i have worked in.

The program has various features like media,phone,Wifi,projection,Vehicle functions like RVC, Onstar-TBT, navigation, Valet mode etc.
So the program arch is mainly divided into HMI &App, App Interface fwk, middleware services , Linux and  BSP and hardware.

I have worked in projection and trailer app modules. mostly in projection module. where i was responsible for application layer development which consists 
BL code to communicate with the HMI and the middleware services. HMI BL loads the app appliations and applications would initialize the App interface fwk.
On receiving the user response for application start , App requests for the list of devices connected and stores the current active device and tells the middleware to 
start the projection session.


1. NOtification mgr controls the popups/QN, alerts,
2. policy evaluation: screen priorty, driver restrictions.

screen mgre: control the view part : states are maintained using rhapsody tool.
logic mgr : controls model part. : maintaining the device list, active state, persistency,

Application used factory design pattern:
HMI BL calls Create app method and gets the application instances for model and app.
Factory class creates the model and view instances.

View part: initialize the state chart.Register app details.
Middleware used singleton as only one device can actively project at a time and can request for session.


STL's used: map, vector


Map in C++ Standard Template Library (STL)
Maps are associative containers that store elements in a mapped fashion. 
Each element has a key value and a mapped value. No two mapped values can have same key values.

Interfaces : To allow model to call view and view to call model interface was used.

dynamic cast.

Subscribe and notify






dbus comm .


Model call startProjection(Device_ID) -> kapi-carplay(projection manager) -> proj app proxyy -> proxy.impl ----DBUS--->>adopter impl. -> plugin controller  -> plugin  adopter->
 	->cinemo(multimedia playback stack)
		-->start projetion and updateUI
	

	//Handle Event for carlife start
-->	
	//deviceID received from device* instance :
	void CarPlayScreenManager::CheckCarlifeConsentStatusAndShowProjection()->(getDeviceID() from device*)

-->	
	//logicmanger's projection start is called: 
	void CarPlayLogicManager::ProjectionStart(deviceid_t deviceID)
-->	
	//projection manager(kapi-carplay)
	device_projection_errors_t ProjectionManager::RequestProjectionStart(deviceid_t deviceID, layer_id_t layerID)
-->	
	//projectionInstance(kapi-carplay)
	void ProjectionInstance::RequestProjectionStart(layer_id_t layerID)
-->	
	//from proxy  to the  adopter(mw-ksvc-carplay) for start projection call over dbus: 
	void AsyncStartProjection(kuint32_t  deviceID, kuint32_t  layerID,ICEDeviceProjectionManagerEvents* pe=NULL)
-->	
	//start projection call received in ksvc-carplay 
	device_projection_errors_t PhoneProjectionManagerPimpl::StartProjection(deviceid_t deviceID, kuint32_t layerID)
-->
	//projection start call is delegated to respective plugin:
	device_projection_errors_t CarLifeController::StartProjection(projection_technology_t projectionType,
                                                              projection_transports_t useTransport)
-->															  
	//Inititate projection called for cinemocarlife adopter(multimedia playbackstack adopter interface)
	device_projection_errors_t CinemoCarLifeAdaptor::InitiancoderStatusStart:
	m_CarLife->SetVideoEncoderStatus(CINEMO_CARLIFE_VIDEO_ENCODER_STATUS_START);


															  
