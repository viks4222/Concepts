Intro:

Rhapsody

Working in kpit for past 2.10 years in infotainment projects with europian & asian clinets.
Currently working for japanese client in in vehicle infotainment and conn project.Have experience of working in application Modelling.
Team of 9 people working on a new module,has worked in application modelling with  a senior colleuge and developed the application 



rhapsody development:
newly added states,functions and interfaces to the baidu carlife module.



Main executable container for HMI library framework, performs loading and unloading of framework
libraries and al applications like media,HFP,wifi,projection.


This is an in-vehicle infotainment & connectivity project which includes multimedia apps like phone, Wi-Fi & media.,FM,AM
It has projection technologies like Apple Carplay, Android-Auto and Baidu-Carlife, Vehicle applications like RVC(rear view camera),
climate control & Trailering App.
Baidu-Carlife feature is responsible for rendering the projection of the data streamed on phone device to the HUD(head up display) 
in vehicle.
Share telephone parameter updates such as signal strength to Mobile device, navigation, provide phone features, VR(voice Recognition).
applications communicate using dbus calls.Uses Altia design tool  for rendering the HMI on HUD.


Working in Rear Seat Entertainment System project for client Panasonic

dbus comm .


Model call startProjection(Device_ID) -> kapi-carplay(projection manager) -> proj app proxyy -> proxy.impl ----DBUS--->>adopter impl. -> plugin controller  -> plugin  adopter->
 	->cinemo(multimedia playback stack)
		-->start projetion and updateUI
	

	//Handle Event for carlife start
-->	
	//deviceID received from device* instance :
	void CarPlayScreenManager::CheckCarlifeConsentStatusAndShowProjection()->(getDeviceID() from device*)

-->	
	//logicmanger's projection start is called: 
	void CarPlayLogicManager::ProjectionStart(deviceid_t deviceID)
-->	
	//projection manager(kapi-carplay)
	device_projection_errors_t ProjectionManager::RequestProjectionStart(deviceid_t deviceID, layer_id_t layerID)
-->	
	//projectionInstance(kapi-carplay)
	void ProjectionInstance::RequestProjectionStart(layer_id_t layerID)
-->	
	//from proxy  to the  adopter(mw-ksvc-carplay) for start projection call over dbus: 
	void AsyncStartProjection(kuint32_t  deviceID, kuint32_t  layerID,ICEDeviceProjectionManagerEvents* pe=NULL)
-->	
	//start projection call received in ksvc-carplay 
	device_projection_errors_t PhoneProjectionManagerPimpl::StartProjection(deviceid_t deviceID, kuint32_t layerID)
-->
	//projection start call is delegated to respective plugin:
	device_projection_errors_t CarLifeController::StartProjection(projection_technology_t projectionType,
                                                              projection_transports_t useTransport)
-->															  
	//Inititate projection called for cinemocarlife adopter(multimedia playbackstack adopter interface)
	device_projection_errors_t CinemoCarLifeAdaptor::InitiancoderStatusStart:
	m_CarLife->SetVideoEncoderStatus(CINEMO_CARLIFE_VIDEO_ENCODER_STATUS_START);


															  
